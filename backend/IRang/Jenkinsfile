pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "irang-backend"
        DOCKER_CONTAINER = "irang-container"
        DOCKER_PORT = "8090"
        EC2_USER = "ubuntu"
        EC2_IP = "i12d208.p.ssafy.io"
        DOCKER_PATH = "/home/ubuntu/docker"
    }

    tools {
        jdk 'jdk17'           // Jenkins에서 자동 설치로 설정된 JDK 이름
        gradle 'Gradle 8.1.1'  // Jenkins에서 자동 설치로 설정된 Gradle 이름
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning the repository...'
                git branch: 'backend',
                    url: 'https://lab.ssafy.com/s12-webmobile4-sub1/S12P11D208.git',
                    credentialsId: 'GitLab-PAT'
            }
        }
        stage('Build Application') {
            steps {
                echo 'Building the application using Gradle...'
                sh '''
                chmod +x gradlew
                gradle clean build
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                echo 'Building the Docker image...'
                sh """
                docker build -t ${DOCKER_IMAGE}:latest .
                """
            }
        }
        stage('Save and Transfer Docker Image') {
            steps {
                echo 'Saving and transferring Docker image to EC2...'
                sh '''
                docker save ${DOCKER_IMAGE}:latest | gzip > ${DOCKER_IMAGE}.tar.gz
                scp -o StrictHostKeyChecking=no ${DOCKER_IMAGE}.tar.gz ${EC2_USER}@${EC2_IP}:${DOCKER_PATH}/
                '''
            }
        }
        stage('Deploy to EC2') {
            steps {
                echo 'Deploying the application on EC2...'
                sh '''
                ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} << EOF
                mkdir -p ${DOCKER_PATH}
                docker stop ${DOCKER_CONTAINER} || true
                docker rm ${DOCKER_CONTAINER} || true
                docker rmi ${DOCKER_IMAGE}:latest || true
                docker load < ${DOCKER_PATH}/${DOCKER_IMAGE}.tar.gz
                docker run -d --name ${DOCKER_CONTAINER} -p ${DOCKER_PORT}:8080 ${DOCKER_IMAGE}:latest
                EOF
                '''
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
